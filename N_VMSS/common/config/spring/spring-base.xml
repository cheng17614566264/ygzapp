<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/config.properties</value>
			</list>
		</property>
	</bean>
	<!--xieli wanted <bean id="getResController" class="com.cjit.common.service.ResponseRes4MasterController" 
		autowire="byName" > <prop key="getRes.ajax">getResController</prop> </bean> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>

	<!-- Transaction manager for iBATIS DAOs -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="cfaTransactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:/config/sqlmap/oracle/sqlmap-config.xml" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI 
		DataSource) -->
	<!-- <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/> -->


	<tx:advice id="createBillAutoTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="constructBillAndSaveAs*" propagation="NOT_SUPPORTED"
				isolation="READ_COMMITTED" timeout="-1" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
				
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
				
				
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="trans*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<!-- other methods are set to read only -->
			<!-- <tx:method name="*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" /> -->
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" />
		</tx:attributes>
	</tx:advice>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- methods starting tx, just as 'save', 'update' or 'remove' use the 
				default transaction settings -->
			<!-- Use the default timeout of the underlying transaction system, or 
				none if timeouts are not supported. -->
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
				
				
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />	
				
				
			<tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<tx:method name="trans*" propagation="REQUIRED" isolation="READ_COMMITTED"
				timeout="-1" rollback-for="Exception" />
			<!-- other methods are set to read only -->
			<!-- <tx:method name="*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" /> -->
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" />
		</tx:attributes>
	</tx:advice>

	<!-- add 2016-08-02 xiaolong -->
	<tx:advice id="vmsWebServicexTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="transService" propagation="REQUIRED"
				isolation="READ_COMMITTED" timeout="-1" rollback-for="Exception" />
			<!-- other methods are set to read only -->
			<!-- <tx:method name="*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" /> -->
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" />
		</tx:attributes>
	</tx:advice>

	<!-- ensure that the above transactional advice runs for any execution // 
		execution(* com.cjit.rocket.usermanager.logic.*Service.tx*(..)) of an operation 
		defined by specified interface // -->
	<tx:advice id="inputPullDataTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="pullData" propagation="REQUIRED"
				isolation="READ_COMMITTED" />
			<!-- <tx:method name="*" read-only="true" propagation="REQUIRED" -->
			<!-- <tx:method name="*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" /> -->
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"
				isolation="DEFAULT" timeout="-1" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="createBillAutoTxMethods"
			expression="execution(* com.cjit.vms.trans.service.createBill.impl.CreateBillServiceAutoImpl.*(..))" />
		<aop:pointcut id="txMethods"
			expression="execution(* com.cjit.vms.trans..*Service.*(..)) OR execution(* com.cjit.vms.input..*.*(..))" />
		<aop:pointcut id="inputPullDataTxMethods"
			expression="execution(* com.cjit.vms.input.service.PullDataService.*(..))" />
		<aop:pointcut id="vmsWebServicexMethods"
			expression="execution(* com.cjit.ws.service.impl.VMSTransServiceImpl.*(..))" /><!-- 
			add 2016-08-02 xiaolong -->

		<aop:advisor advice-ref="createBillAutoTxAdvice"
			pointcut-ref="createBillAutoTxMethods" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txMethods" />
		<aop:advisor advice-ref="inputPullDataTxAdvice"
			pointcut-ref="inputPullDataTxMethods" />
		<aop:advisor advice-ref="vmsWebServicexTxAdvice"
			pointcut-ref="vmsWebServicexMethods" /><!-- add 2016-08-02 xiaolong -->
	</aop:config>

	<!-- 引用ehCache的配置 <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> 
		<property name="configLocation"> <value>classpath:ehcache.xml</value> </property> 
		</bean> -->

	<!-- 定义ehCache的工厂，并设置所使用的Cache name <bean id="cache" class="org.springframework.cache.ehcache.EhCacheFactoryBean"> 
		<property name="cacheManager"> <ref local="cacheManager" /> </property> <property 
		name="cacheName"> <value>ROCKET_CACHE</value> </property> </bean> -->

	<bean id="springContextUtil" class="com.cjit.common.util.SpringContextUtil" />

	<bean id="importTypeUtil" class="com.cjit.gjsz.login.util.ImportTypeUtil">
		<property name="types">
			<map>
				<entry>
					<key>
						<value>1</value>
					</key>
					<value>t_base_income,t_decl_income,t_fini_export,t_export_info
					</value>
				</entry>
				<entry>
					<key>
						<value>2</value>
					</key>
					<value>t_base_remit,t_decl_remit,t_fini_remit,t_customs_decl
					</value>
				</entry>
				<entry>
					<key>
						<value>3</value>
					</key>
					<value>t_base_payment,t_decl_payment,t_fini_payment</value>
				</entry>
				<entry>
					<key>
						<value>4</value>
					</key>
					<value>t_base_export,t_fini_dom_export,t_export_info</value>
				</entry>
				<entry>
					<key>
						<value>5</value>
					</key>
					<value>t_base_dom_remit,t_fini_dom_remit,t_customs_decl</value>
				</entry>
				<entry>
					<key>
						<value>6</value>
					</key>
					<value>t_base_dom_pay,t_fini_dom_pay</value>
				</entry>
				<entry>
					<key>
						<value>7</value>
					</key>
					<value>t_company_info,t_company_openinfo,t_invcountrycode_info
					</value>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="fmssDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.fmss.username}" />
		<property name="password" value="${jdbc.fmss.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>

	<bean id="datacoreDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.datacore.username}" />
		<property name="password" value="${jdbc.datacore.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>

	<bean id="sqlMapClientLinkDatacore" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="datacoreDataSource" />
		<property name="configLocation"
			value="classpath:/config/sqlmap/oracle/sqlmap-config.xml" />
	</bean>
	
	<!--新增
		日期：2018-08-22
		作者：刘俊杰
		功能：通过远程连接总账的数据库(oracle)
	-->
	<!-- start -->
	<bean id="generalIedgerDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${GeneralIedger.driver}" />
		<property name="url" value="${GeneralIedger.url}" />
		<property name="username" value="${GeneralIedger.username}" />
		<property name="password" value="${GeneralIedger.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
	</bean>
	<bean id="sqlMapClientLinkGeneralIedger" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="generalIedgerDataSource" />
		<property name="configLocation"
			value="classpath:/config/sqlmap/oracle/sqlmap-config.xml" />
	</bean>
	<!-- end -->



<!-- 定时跑批  
<pre name="code" class="html">声明bean
<bean id="testQuarz" class="com.cjit.achieveTemp.timing" ></bean>
	<bean id="quartzDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="testQuarz" />
		</property>
		<property name="targetMethod">
			<value>run</value>
		</property>
	</bean>
	<bean id="quartzTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="quartzDetail" />
		</property>
		<property name="cronExpression">
			这里配置任务执行的时间
			<value>0 0 7 * * ?</value>
		</property>
	</bean>
	<bean autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="quartzTrigger" />
			</list>
		</property>
	</bean> -->
	

</beans>
